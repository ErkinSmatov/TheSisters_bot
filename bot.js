const TelegramBot = require('node-telegram-bot-api');
const mongoose = require('./database');
const User = require('./models/user');
const config = require("config");
const { createInvoice } = require('./payment');

const TELEGRAM_BOT_TOKEN = config.get('telegramBotToken');
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });

const packageDetails = [
    { key: '1', amount: 3550, name: '–¢–∞—Ä–∏—Ñ #1 - 3550—Ç–≥', description: '1 –≤–∏–¥–µ–æ —É—Ä–æ–∫\n¬´–ì–∏–ø–Ω–æ—Ç–µ–ª–æ¬ª - —É—á–∏–º—Å—è –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏', photo: './assets/kurs1.jpg' },
    { key: '2', amount: 5055, name: '–¢–∞—Ä–∏—Ñ #2 - 5055—Ç–≥', description: '2 –≤–∏–¥–µ–æ —É—Ä–æ–∫–∞\n¬´–ì–∏–ø–Ω–æ—Ç–µ–ª–æ¬ª —É—á–∏–º—Å—è –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏\n¬´–ü–æ–ø–∞ –î–≤–∏–∂¬ª —É—á–∏–º—Å—è —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å –ø–∞–ø–æ–π', photo: './assets/kurs2.jpg' },
    { key: '3', amount: 7077, name: '–¢–∞—Ä–∏—Ñ #3 - 7077—Ç–≥', description: '2 –≤–∏–¥–µ–æ —É—Ä–æ–∫–∞ + üéÅ–ø–æ–¥–∞—Ä–æ—á–Ω—ã–µ —É—Ä–æ–∫–∏\n¬´–ì–∏–ø–Ω–æ—Ç–µ–ª–æ¬ª —É—á–∏–º—Å—è –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏\n¬´–ü–æ–ø–∞ –î–≤–∏–∂¬ª —É—á–∏–º—Å—è —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å –ø–∞–ø–æ–π\n++\nüéÅ–ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —É—Ä–æ–∫ "–£–ø—Ä—É–≥–∞—è –ø–æ–ø–∞"\nüéÅ–ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —É—Ä–æ–∫ "–î–ª—è –ø–ª–æ—Å–∫–æ–≥–æ –∂–∏–≤–æ—Ç–∞"', photo: './assets/kurs3.jpg' }
];
const lessonsPhoto = [
    {
        type: 'photo',
        media: './assets/kurs1.jpg',
        caption: '¬´–ì–∏–ø–Ω–æ—Ç–µ–ª–æ¬ª —É—á–∏–º—Å—è –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏'
    },
    {
        type: 'photo',
        media: './assets/kurs2.jpg',
        caption: '¬´–ü–æ–ø–∞ –î–≤–∏–∂¬ª —É—á–∏–º—Å—è —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å –ø–∞–ø–æ–π'
    },
    {
        type: 'photo',
        media: './assets/kurs3.jpg',
        caption: '–£—Ä–æ–∫ —É–ø—Ä—É–≥–∞—è –ø–æ–ø–∞'
    },
    {
        type: 'photo',
        media: './assets/kurs4.jpg',
        caption: '–£—Ä–æ–∫ –¥–ª—è –ø–ª–æ—Å–∫–æ–≥–æ –∂–∏–≤–æ—Ç–∏–∫–∞'
    }
];

const validOptions = ['/start', '/help', '–°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤', '–ú–æ–∏ –∫—É—Ä—Å—ã', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã', '–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º', '–ü–æ–º–æ—â—å', '< –ù–∞–∑–∞–¥'];
const userStates = {};
const targetChatId = '463784455';
const KaspiQR = config.get('KaspiQR');
const AlinaTG = config.get('AlinaTG');

async function updateUserAndCreateInvoice(chatId, name, phone, selectedPackage) {
    try {
        const userDoc = await User.findOneAndUpdate(
            { chatId },
            { name, phone, $push: { package: selectedPackage.name } },
            { upsert: true, new: true, setDefaultsOnInsert: true }
        );

        // const invoice = createInvoice({
        //     userId: userDoc._id,
        //     amount: selectedPackage.amount,
        //     description: selectedPackage.description
        // });

        return { userDoc };
    } catch (error) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: ' + error.message);
    }
}

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const user = await User.findOne({ chatId });
    userStates[chatId] = 'ready';
    if (user) {
        bot.sendMessage(chatId, `–†–∞–¥ –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞, ${user.name}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`, {
            reply_markup: {
                keyboard: [['–°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤', '–ú–æ–∏ –∫—É—Ä—Å—ã'], ['–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã'], ['–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º']], //, ['–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º'], ['–ü–æ–º–æ—â—å']
                resize_keyboard: true,
                one_time_keyboard: true
            }
        });
    } else {
        bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ online Amazonka v2.0 ‚ù§Ô∏è\n–î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –∏–∑ –º–µ–Ω—é —Å–Ω–∏–∑—É —á–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?`, {
            reply_markup: {
                keyboard: [['–°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã'], ['–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º', '–ü–æ–º–æ—â—å']], //, ['–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º'], ['–ü–æ–º–æ—â—å']
                resize_keyboard: true,
                one_time_keyboard: true
            }
        });
    }
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (text === '–ú–æ–∏ –∫—É—Ä—Å—ã') {
        const user = await User.findOne({ chatId });

        if (user) {
            if (!Array.isArray(user.package) || user.package.length === 0) {
                bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.');
            } else {
                const courses = user.package.join('\n');
                bot.sendMessage(chatId, `–í–∞—à–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω–Ω—ã–µ –∫—É—Ä—Å—ã:\n${courses}`);
            }
        } else {
            bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ.');
        }
    } else if (text === '–°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤') {
        await bot.sendMediaGroup(chatId, lessonsPhoto).then(() => {
            bot.sendMessage(chatId, '–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã', callback_data: 'tarifs' }]
                    ]
                }
            });
        }).catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä—É–ø–ø—ã –º–µ–¥–∏–∞:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä—É–ø–ø—ã –º–µ–¥–∏–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        });
    } else if (text === '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã') {
        const packageButtons = packageDetails.map((item) => {
            return [{ text: item.name, callback_data: `package_${item.key}` }];
        });

        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n- –£—Ä–æ–∫–∏ –¥–ª—è—Ç—Å—è 8 –º–∏–Ω—É—Ç\n- –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ —É—Ä–æ–∫–∏ –ø–æ 4 –º–∏–Ω—É—Ç—ã', {
            reply_markup: {
                inline_keyboard: packageButtons
            }
        });
    } else if (text === '–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º') {
        bot.sendMessage(chatId, '–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏.', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ù–∞–ø–∏—Å–∞—Ç—å', url: AlinaTG }]
                ]
            },
        });
    } else if (text === '–ü–æ–º–æ—â—å') {
        userStates[chatId] = 'help';
        bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å`, {
            reply_markup: {
                keyboard: [['–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö', '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É—Ä–æ–∫–∞—Ö'], ['–ü–æ–ª—å–∑–∞ —É—Ä–æ–∫–æ–≤', '–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º'], ['< –ù–∞–∑–∞–¥']],
                resize_keyboard: true,
                one_time_keyboard: true
            }
        });
    } else if (text === '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö') {
        bot.sendMessage(chatId, config.get('TarifHelp'), {
            reply_markup: {
                keyboard: [['–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö', '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É—Ä–æ–∫–∞—Ö'], ['–ü–æ–ª—å–∑–∞ —É—Ä–æ–∫–æ–≤', '–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º'], ['< –ù–∞–∑–∞–¥']],
                resize_keyboard: true,
                one_time_keyboard: true
            }
        });
    } else if (text === '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É—Ä–æ–∫–∞—Ö') {
        bot.sendMessage(chatId, config.get('LessonsHelp'), {
            reply_markup: {
                keyboard: [['–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö', '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É—Ä–æ–∫–∞—Ö'], ['–ü–æ–ª—å–∑–∞ —É—Ä–æ–∫–æ–≤', '–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º'], ['< –ù–∞–∑–∞–¥']],
                resize_keyboard: true,
                one_time_keyboard: true
            }
        });
    } else if (text === '–ü–æ–ª—å–∑–∞ —É—Ä–æ–∫–æ–≤') {
        bot.sendMessage(chatId, config.get('HelpfulHelp'), {
            reply_markup: {
                keyboard: [['–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö', '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É—Ä–æ–∫–∞—Ö'], ['–ü–æ–ª—å–∑–∞ —É—Ä–æ–∫–æ–≤', '–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º'], ['< –ù–∞–∑–∞–¥']],
                resize_keyboard: true,
                one_time_keyboard: true
            }
        });
    } else if (text === '< –ù–∞–∑–∞–¥') {
        userStates[chatId] = 'ready';
        bot.sendMessage(chatId, `–ù–∞–¥–µ—é—Å—å —è —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã`, {
            reply_markup: {
                keyboard: [['–°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã'], ['–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º', '–ü–æ–º–æ—â—å']], //, ['–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º'], ['–ü–æ–º–æ—â—å']
                resize_keyboard: true,
                one_time_keyboard: true
            }
        });
    } else if (msg.photo || msg.document) {
        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ
        const from = msg.from;
        const existingUser = await User.findOne({ chatId });
        await bot.forwardMessage(targetChatId, chatId, msg.message_id)
            .then(async () => {
                const userLink = from.username ? `https://t.me/${from.username}` : null;
                const userInfo = `
–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:
ChatId: ${from.id}
–ò–º—è: ${from.first_name}
–§–∞–º–∏–ª–∏—è: ${from.last_name || ''}
Username: @${from.username || ''}
–¢–ª–µ—Ñ–æ–Ω: ${existingUser.phone || ''}
–¢–∞—Ä–∏—Ñ: ${existingUser.package[existingUser.package.length - 1]}
${userLink ? `–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: [–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç](${userLink})` : '–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç username.'}`;
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
                await bot.sendMessage(targetChatId, userInfo, { parse_mode: 'Markdown' });
                await bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ(—á–µ–∫), —Å–∫–æ—Ä–æ –≤–∞–º –æ—Ç–ø—Ä–∞–≤—è—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª —Å —É—Ä–æ–∫–∞–º–∏', {
                    reply_markup: {
                        keyboard: [['–°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã'], ['–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º', '–ü–æ–º–æ—â—å']],
                        resize_keyboard: true,
                        one_time_keyboard: true
                    }
                });
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
            });
    } else if (userStates[chatId] === 'ready' && !validOptions.includes(text)) {
        await bot.sendMessage(chatId, `–ò–∑–≤–µ–Ω–∏—Ç–µ, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é, –º–æ–∂–µ—Ç –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é —Å–Ω–∏–∑—É`, {
            reply_markup: {
                keyboard: [['–°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã'], ['–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º', '–ü–æ–º–æ—â—å']],
                resize_keyboard: true,
                one_time_keyboard: true
            }
        });
    }
});

bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    const data = callbackQuery.data;

    if (data.startsWith('package_')) {
        const packageId = data.split('_')[1];
        const selectedPackage = packageDetails[packageId - 1];

        if (selectedPackage) {
            await bot.sendPhoto(chatId, selectedPackage.photo, {
                caption: `<b>${selectedPackage.name}</b>\n\n${selectedPackage.description}`,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }, { text: '–ö—É–ø–∏—Ç—å', callback_data: `buy_${packageId}` }]
                    ]
                }
            });
        } else {
            bot.sendMessage(chatId, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø–∞–∫–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    } else if (data === 'back') {
        bot.deleteMessage(chatId, messageId);
    } else if (data.startsWith('buy_')) {
        const packageId = data.split('_')[1];
        const selectedPackage = packageDetails[packageId - 1];
        const existingUser = await User.findOne({ chatId });

        if (existingUser) {
            try {
                const { userDoc } = await updateUserAndCreateInvoice(chatId, existingUser.name, existingUser.phone, selectedPackage);
                await bot.sendMessage(chatId, `1) –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Kaspi –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'Kaspi', url: KaspiQR }]
                        ]
                    }
                });
                await bot.sendMessage(chatId, `2) C–∫–∏–Ω—å—Ç–µ —Å—é–¥–∞ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ`, {
                    disable_notification: true,
                });
                await bot.sendMessage(chatId, `3) –ü–æ—Å–ª–µ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª`, {
                    disable_notification: true,
                });
                setTimeout(async () => {
                    await bot.sendMessage(chatId, `_* —É—Ä–æ–∫–∏ –±–µ–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏_\n_* —Å—É–º–º–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—Ç–Ω–∞—è_\n_* –≤–∏–¥–µ–æ —É –≤–∞—Å –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞_`, {
                        disable_notification: true,
                        parse_mode: 'Markdown'
                    });
                }, 3000)
            } catch (error) {
                console.error(error.message);
                bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            }
        } else if (selectedPackage) {
            userStates[chatId] = 'registration';
            bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:');
            bot.once('message', (msg) => {
                const name = msg.text;
                bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
                bot.once('message', async (msg) => {
                    const phone = msg.text;

                    try {
                        const { userDoc } = await updateUserAndCreateInvoice(chatId, name, phone, selectedPackage);
                        await bot.sendMessage(chatId, `1) –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Kaspi –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ`, {
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'Kaspi', url: KaspiQR }]
                                ]
                            }
                        });
                        await bot.sendMessage(chatId, `2) C–∫–∏–Ω—å—Ç–µ —Å—é–¥–∞ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ`, {
                            disable_notification: true,
                        });
                        await bot.sendMessage(chatId, `3) –ü–æ—Å–ª–µ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª`, {
                            disable_notification: true,
                        });
                        setTimeout(async () => {
                            await bot.sendMessage(chatId, `_* —É—Ä–æ–∫–∏ –±–µ–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏_\n_* —Å—É–º–º–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—Ç–Ω–∞—è_\n_* –≤–∏–¥–µ–æ —É –≤–∞—Å –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞_`, {
                                disable_notification: true,
                                parse_mode: 'Markdown'
                            });
                        }, 3000)
                        userStates[chatId] = 'ready';
                    } catch (error) {
                        console.error(error.message);
                        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                    }
                });
            });
        }
    } else if (data === 'tarifs') {
        const packageButtons = packageDetails.map((item) => {
            return [{ text: item.name, callback_data: `package_${item.key}` }];
        });

        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n- –£—Ä–æ–∫–∏ –¥–ª—è—Ç—Å—è 8 –º–∏–Ω—É—Ç\n- –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ —É—Ä–æ–∫–∏ –ø–æ 4 –º–∏–Ω—É—Ç—ã', {
            reply_markup: {
                inline_keyboard: packageButtons
            }
        });
    }
});

bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, '–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏.', {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ù–∞–ø–∏—Å–∞—Ç—å', url: AlinaTG }]
            ]
        },
    });
});

module.exports = bot;
